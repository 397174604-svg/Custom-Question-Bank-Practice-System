1、软件危机： 
答案：计算机软件的开发和维护过程中所遇到的一系列严，包括如何开发软件以满足对软件日益增长的需求和如何维护数量不断膨胀的已有软件。
2、验收测试： 
答案：把软件系统作为单一实体进行测试，在用户的积极参与下使用实际数据进行测试，验证系统确实能够满足用户需要。                
3、聚集：
答案：其表示类与类之间的关系是整体与部分的关系。
4、路径覆盖：
答案：在逻辑覆盖测试中选取足够多的测试数据，使程度的第条可能路径都至少执行一次。                 
5、SRS：    
答案：软件需要规格说明书，是需求分析阶段的文档，详细描述了用户能软件的各种需求。
6、模型： 
答案：为了理解事物面对事物作出的一种抽象，由一组图形符号和组织这些符号的规则组成。
7、结对编程：                  
答案：由两名开发人员在同一台计算机上共同编写多解决同一个问题的程序代码，一个人编码，另一个人对代码进行审查与测试，以保证代码的可读性。   
8、数据流图：
答案：是一种图形化技术，它描绘信息流和数据从输入移动到输出的过程中所经受的变换。
9、回归测试：
答案：重新执行已经做过的测试的某个子集，以保证新变化没有带来非预期的副作用。                 
10、软件可靠性： 
答案：是指程序在给定的时间间隔内按规格说明书的夫定成功地运行的概率。
11、ß测试： 
答案：由最终用户在一个或者多个客户场所进行，开发者通常不在现场。
12、测试用例： 
答案：通常由测试数据和预期输出的结果两部分组成。                
13、数据字典：
答案：关于数据信息的集合，也就是对数据流图中包含的所有元素的定义的集合。
14、重载：  
答案：函数在同一作用域内的若干个参数特征不同的函数可以使用相同的函数名字               
15、流图： 
答案：其实实质是退化了的程序流程图，它仅仅描绘程序的控制流程，完全不表现对数据的具体操作以及分支或循环的具体条件。                  
16、数据流图：
答案：是一种图形化技术，它描绘信息流和数据从输入移动到输出的过程中所经受的变换。               
17、软件可靠性：
答案：是指程序在给定的时间间隔内按规格说明书的夫定成功地运行的概率。
18、软件的可用性：
答案：程序在给定的时间点按规格说明书的夫定成功地运行的概率。
19、a测试：
答案：由用户在开发者的场所进行，并且在开发者对用户的“指导”下进行测试。
20、多态性：
答案：当对象接收到发送给它的消息时，根据该对象所属于的动态选用在该类中的定义的实现算法。
21、瀑布模型：
答案：将软件开发活动中的各项活动规定为依线性顺序联接的若干阶段工作，形如瀑布流水，最终得到软件系统或软件产品。
22、增量模型：
答案：一种非整体开发的模型，该模型具有较大的灵活性，适合于软件需求不明确、设计方案有一定风险的软件项目。它推迟某些阶段或所有阶段中的细节，从而较早地产生工作软件。
23、螺旋模型：
答案：瀑布模型和增量模型结合起来，并加入了风险分析。将开发划分为制定计划、风险分析、实施工程和客户评估四类活动。沿着螺旋线每转一圈，表示开发出一个更完善的新的软件版本。如果开发风险过大，开发机构和客户无法接受，项目有可能就此终止；多数情况下，会沿着螺旋线继续下去，自内向外逐步延伸，最终得到满意的软件产品。
24、判定表：
答案：判定表是一种二维的表格，常用于较复杂的组合条件。可以处理用结构化语言不易处理的，有较复杂的组合条件的问题。
25、原型：
答案：是软件开发过程中，软件的一个早期可运行的版本，它反映了最终系统的部分重要特性。 原型化方法的基本思想是花费少量代价建立一个可运行的系统，使用户及早获得学习的机会，强调的是软件开发人员与用户的不断交互，通过原型的演进不断适应用户任务改变的需求。
26、状态迁移图：
答案：是描述系统的状态如何相对应于外部的信号进行迁移的一种图形表示。用圆圈“表示可得到的系统状态，用箭头表示从一种状态向另一种状态的迁移。在箭头上写上导致迁移的信号或事件的名字。
27、消息：
答案：是指对象之间在交互中所传送的通信信息。 一个消息应该包含以下信息： 消息名、接收消息对象的标识、服务标识 、消息和方法、输入信息、回答信息等。
28、信息隐蔽：
答案：在面向对象的方法中也即“封装性” ，封装性是保证软件部件具有优良的模块性的基础。封装性是将对象的属性及操作（服务）结合为一个整体，尽可能屏蔽对象的内部细节，软件部件外部对内部的访问通过接口实现。
29、弱耦合：
答案：按照抽象与封装性，弱耦合是指子系统之间的联系应该尽量的少。子系统应具有良好的接口，子系统通过接口与系统的其它部分联系。
30、强内聚：
答案：是指子系统内部是由一些关系密切的类构成，除了少数的“通信类”外，子系统中的类应该只与该子系统中的其它类协作，构成具有强内聚性的子系统。
31、时序图：
答案：时序图用来描述对象之间交互的时间特性，参与交互的对象在顶上一行，对象下的竖线，称为对象的生命线，从上到下表示时间的延伸，生命线之带箭头连线表示消息的传送，并在连线上标注消息名。
32、动态模型：
答案：着重于系统的逻辑结构；描述某时刻对象及其联系的改变。包括状态图和事件追综图。
33、用例：
答案：在 UML 中,用例被定义成系统执行的一系列动作（功能） ，即 Use Case是对系统用户需求的描述，表达了系统的功能和所提供的服务。
34、泛化：
答案：在 UML 中泛化关系指出类之间的“一般与特殊关系”，它是通用元素与具体元素之的一种分类关系，通常即是继承关系。
35、状态图：
答案：描述一个特定对象的所有可能的状态及其引起状态转移的事件。一个状态图包括一系列的状态以及状态之间的转移。
36、软件复用：
答案：指重复使用已有的软件产品用于开发新的软件系统，以达到提高软件系统的开发质量与效率，降低开发成本的目的。在软件复用中重复使用的软件产品不仅仅局限于程序代码，而是包含了在软件生产的各个阶段所得到的各种软件产品，这些软件产品包括了：领域知识、体系结构、需求分析、设计文档、程序代码、测试用和测试数据等等。
37、完善性维护：
答案：为了满足用户使用过程中对软件提出的新的功能与性能要求，需要对原来的软件的功能进行修改或扩充，这种扩充软件功能、增强软件性能、提高软件运行效率和可维护性而进行的维护活动称为完善性维护。
38、适应性维护：
答案：为了适应计算机的飞速发展，使软件适应外部新的硬件和软件环境或者数据环境（数据库、数据格式、数据输入/输出方式、数据存储介质）发生的变化，而进行修改软件的过程。
39、纠错性维护：
答案：对在测试阶段未能发现的，在软件投入使用后才逐渐暴露出来的错误的测试、诊断、定位、纠错以及验证、修改的回归测试过程，称为纠错性维护。
40、预防性维护：
答案：为了提高软件的可维护性和可靠性，采用先进的软件工程方法对需要维护的软件或软件中的某一部分重新进行设计、编制和测试，为以后进一步维护和运行打好基础。也就是软件开发组织选择在最近的将来可能变更的程序，做好变更它们的准备。
41、维护的副作用：
答案：指由于修改程序而导致新的错误或者新增加一些不必要的活动。
42、软件再工程：
答案：即需要对旧的软件进行重新处理、调整，提高其可维护性，它不仅能从已存在的程序中重新获得设计信息，而且还能使用这些信息来改建或重构现有的系统，以改善它的综合质量。
43、逆向工程：
答案：是分析程序，力图在比源代码更高抽象层次上建立程序表示的过程；是一个设计恢复的过程。使用逆向工程工具可以从已经存在的软件中提取数据结构、体系结构和程序设计结构。
44、CASE：
答案：Computer-Aided Software Engineering，简称 CASE，是为软件开发提供一组优化集成的且大量节省成本的软件开发工具，其目的是实现软件生存周期各环节的自动化并使之成为一个整体。
45、可行性研究：
答案：称为可行性分析，进行可行性分析的目的是避免盲目投资,减少不必要的损失，即以最小的代价在最短的时间内确定该项目是否可能开发、是否值得。
46、系统健壮性：
答案：在硬件故障、操作错误等意外情况下，系统能作出适当反应的程度。
47、系统正确性：
答案：系统满足规格说明和优化目标的程度，即在预定环境下能正确地完成预期功能的程度。
48、可维护性：
答案：诊断和改正运行时所发现错误所需工作量的大小。
49、可移植性：
答案：改变系统的软、硬件环境及配置时，所需工作量的大小。
50、软件工程：
答案：是一门指导计算机软件系统开发和维护的工程学科， 是一门新兴的边缘学科，它涉及到计算机科学、工程科学、管理科学、数学等多学科，软件工程的研究范围广，不仅包括软件系统的开发方法和技术、管理技术，还包括软件工具、环境及软件开发的规范。